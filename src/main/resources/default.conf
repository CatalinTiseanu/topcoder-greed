greed {
    codeRoot    = "${Contest.Name}"

    logging {
        logLevel    = OFF
        logToStderr = true
        logFolder   = Logs
    }

    backup {
        fileCountLimit = 3
        fileName = "${GeneratedFileName}.bak.${BackupNumber}"
    }

    shared {
        templateDef {
            test {
                outputKey = TestCode
                transformers = [ empty-block, cont-blank-line ]
            }
            filetest {
                outputKey = TestCode
                transformers = [ empty-block, cont-blank-line ]
                dependencies = [ testcase ]
                options {
                    runMultipleProcesses = false
                }
            }
            source {
                overwrite = skip
                outputFileName = "${Problem.Name}"
                transformers = [ empty-block, cont-blank-line ]
                dependencies = [ key(TestCode) | unittest ]
            }
            unittest {
                overwrite = skip
                templateFile = None
                outputFileName = "${Problem.Name}Test"
                transformers = [ empty-block, cont-blank-line ]
            }
            testcase {
                overwrite = skip
                outputFile = "${Problem.Name}.sample"
                templateFile = builtin(testcase/testcases.tmpl)
            }
            problem-desc {
                overwrite = force
                outputFile = "${Problem.Name}.html"
                templateFile = builtin(problem/desc.html.tmpl)
                options {
                    # shows String[]s with rectangular dimensions as a grid.
                    gridArrays         = false
                    # Show problem definition (method signature description, etc)
                    showDefinition     = true
                    forceDefLanguage   = false
                    # The base font size. Statement scales up or down based on this value:
                    fontSize           = "16px"
                    # Example numbers decorated inside a circle.
                    fancyExampleNumber = true
                    # Show input, output, comment tags in examples section:
                    showTags           = true
                    # Show argument names before their values in examples section:
                    showVariableNames  = true
                    # By default, test case data is highlighted by special background:
                    highlightData      = true
                    # set to false to disable image resizing:
                    resizeImages       = "200px"
                    # The favicon, by default we use topcoder's, set to false to disable it.
                    favIcon            = "http://www.topcoder.com/i/favicon.ico"
                    # A custom CSS. When set to false, it does nothing. 
                    # If set to a .css path (Example: "../statement.css", it will replace
                    # the default HTML style with a call to that external style sheet.
                    customStyleSheet      = false
                    # If false, does nothing.
                    # If set to a string, the string will be shown before the expected output
                    # E.g: outputPrefix = "Returns: " 
                    # Will make it do what TC's problem statement does.
                    outputPrefix          = false
                    # set One of these to true to enable the theme:
                    colorThemeBlack       = true
                    colorThemeBlue        = false
                    colorThemeLowContrast = false
                }
            }
            dualcolor-test {
                outputKey = TestCode
                templateFile = None
                transformers = [ empty-block, cont-blank-line ]
                dependencies = [ dualcolor-tester ]
                options {
                    compactMode          = COMPACT_REPORT
                    # example: localTestTimeFactor = "0.5"
                    # halves the execution time per test case.
                    localTestTimeFactor  = false
                    singleFile           = false
                    disableColors        = false
                    customTesterLocation = false
                    #(c++ only)
                    runMultipleProcesses = true
                }
            }
            dualcolor-tester {
                overwrite = skip
                outputFileName = "tester"
                outputFileExtension = None
                templateFile = None
                transformers = [ empty-block, cont-blank-line ]
            }
        }

        defaultLanguage {
            templates = [ source, filetest, problem-desc ]
            submitTemplate = source
        }

        cstyleLanguage = ${greed.shared.defaultLanguage} {
            cutBegin = "// CUT begin"
            cutEnd = "// CUT end"
        }
    }

    language {
        cpp = ${greed.shared.cstyleLanguage} {
            longIntTypeName = long long

            templateDef = ${greed.shared.templateDef} {
                filetest.templateFile = builtin(filetest/cpp.tmpl)
                test {
                    templateFile = builtin(test/cpp.tmpl)
                    options {
                        cpp11 = false
                        runMultipleProcesses = false
                    }
                }
                dualcolor-test.templateFile = builtin(dualcolor/main.cpp.tmpl)
                dualcolor-tester.templateFile = builtin(dualcolor/tester.cpp.tmpl)
                dualcolor-tester.outputFileExtension = cpp
                source.templateFile = builtin(source/cpp.tmpl)
                source.outputFileExtension = cpp
            }
        }

        java = ${greed.shared.cstyleLanguage} {
            templateDef = ${greed.shared.templateDef} {
                filetest.templateFile = builtin(filetest/java.tmpl)
                test.templateFile = builtin(test/java.tmpl)
                source.templateFile = builtin(source/java.tmpl)
                source.outputFileExtension = java
                unittest.templateFile = builtin(unittest/junit.java.tmpl)
                unittest.outputFileExtension = java
            }
        }

        csharp = ${greed.shared.cstyleLanguage}  {
            templateDef = ${greed.shared.templateDef} {
                filetest.templateFile = builtin(filetest/cs.tmpl)
                test.templateFile = builtin(test/cs.tmpl)
                source.templateFile = builtin(source/cs.tmpl)
                source.outputFileExtension = cs
                unittest.templateFile = builtin(unittest/nunit.cs.tmpl)
                unittest.outputFileExtension = cs
            }
        }

        python = ${greed.shared.defaultLanguage}  {
            cutBegin = "# CUT begin"
            cutEnd = "# CUT end"

            templateDef = ${greed.shared.templateDef} {
                filetest.templateFile = builtin(filetest/py.tmpl)
                test.templateFile = builtin(test/py.tmpl)
                dualcolor-test.templateFile = builtin(dualcolor/main.py.tmpl)
                dualcolor-tester.templateFile = builtin(dualcolor/tester.py.tmpl)
                dualcolor-tester.outputFileExtension = py
                source.templateFile = builtin(source/py.tmpl)
                source.outputFileExtension = py
            }

        }
    }
}
